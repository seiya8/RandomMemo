<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gr10 App</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .nav-tabs {
      justify-content: center;
    }
    .disabled {
      cursor: not-allowed;
    }
  </style>
</head>
<body>
<div class="container d-flex justify-content-center mt-5 pt-5">
  <div class="col-md-6 col-lg-4">
    <h1 class="text-center mb-4">Gr10 App</h1>
    <div class="mt-5">
      <ul class="nav nav-tabs nav-fill" id="myTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="login-tab" data-bs-toggle="tab" href="#login" role="tab" aria-controls="login" aria-selected="true">ログイン</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="signup-tab" data-bs-toggle="tab" href="#signup" role="tab" aria-controls="signup" aria-selected="false">新規登録</a>
        </li>
      </ul>
      <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="login" role="tabpanel" aria-labelledby="login-tab">
          <form class="mt-3" id="loginForm">
            <div class="mb-3">
              <label for="loginUsername" class="form-label">ユーザー名</label>
              <input class="form-control" type="text" id="loginUsername" required>
            </div>
            <div class="mb-3">
              <label for="loginPassword" class="form-label">パスワード</label>
              <input class="form-control" type="password" id="loginPassword" required>
            </div>
            <div class="d-grid">
              <input type="submit" value="ログイン" disabled="true" class="disabled btn btn-primary" id="loginSubmitBtn">
            </div>
          </form>
        </div>
          <div class="tab-pane fade" id="signup" role="tabpanel" aria-labelledby="signup-tab">
            <form class="mt-3" id="signupForm">
              <div class="mb-3">
                <label for="signupUsername" class="form-label">ユーザー名</label>
                <input class="form-control" type="text" id="signupUsername" required>
              </div>
              <div class="mb-3">
                <label for="signupPassword" class="form-label">パスワード</label>
                <input class="form-control" type="password" id="signupPassword" required>
              </div>
              <div class="d-grid">
                <input type="submit" value="新規登録" disabled="true" class="disabled btn btn-primary" id="signupSubmitBtn">
              </div>
            </form>
          </div>
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="loginSignup.js" defer></script>
</body>
</html>

SELECT DISTINCT r.id, r.name, r.sum_star / r.num_customer AS avg_star
FROM restaurants r
JOIN visited_restaurants vr1 ON r.id = vr1.restaurant_id
JOIN visited_restaurants vr2 ON vr1.user_id = vr2.user_id
WHERE vr2.restaurant_id IN (
    SELECT vr3.restaurant_id
    FROM visited_restaurants vr3
    WHERE vr3.user_id = 1
)
AND vr2.user_id <> 1
AND r.id NOT IN (
    SELECT vr4.restaurant_id
    FROM visited_restaurants vr4
    WHERE vr4.user_id = 1
)
ORDER BY avg_star DESC
LIMIT 5;


import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import service.RestaurantService;

@WebServlet("/displayImage")
public class DisplayImageServlet {
    private static final long serialVersionUID = 1L;
    private RestaurantService restaurantService = new restaurantService();

    public DisplayImageServlet() {
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int restaurantId = Integer.parseInt(request.getParameter("id"));
        response.setContentType("image/png");

        byte[] byteArray = restaurantService.getImageBytesByRestaurantId(restaurantId);
        InputStream is = new ByteArrayInputStream(byteArray);
        BufferedInputStream bufferedIs = new BufferedInputStream(is);
        BufferedImage img = ImageIO.read(bufferedIs);

        OutputStream outputStream = response.getOutputStream();
        ImageIO.write(img, "png", outputStream);
        outputStream.flush();
    }
}

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ユーザー検索</title>
</head>
<body>
  <h1>ユーザー検索</h1>
  <input type="text" id="searchInput" placeholder="ユーザー名を入力">
  <ul id="userList">
  </ul>
  <script>
    const searchUsers = () => {
      const name = document.querySelector("#searchInput").value;

      fetch(`/someapp/searchUser?name=${name}`)
        .then(response => response.json())
        .then(data => {
          const userList = document.querySelector("#userList");
          userList.innerHTML = "";
          data.forEach(user => {
            const li = document.createElement("li");
            li.textContent = user.name;
            userList.appendChild(li);
          });
        })
        .catch(error => console.error('Error:', error));
    }

    document.addEventListener("DOMContentLoaded", function() {
      searchUsers();
      document.querySelector("#searchInput").addEventListener("input", searchUsers);
    });
  </script>
</body>
</html>

public List<User> getUsersByNamePrefix(String name) {
    List<User> users = new ArrayList<>();
    String query = "SELECT id, name from users";
    if (name != null && !name.isEmpty()) query += " WHERE name LIKE ?";
    try (Connection conn = dataSource.getConnection();
            PreparedStatement stmt = conn.prepareStatement(query)) {
        if (name != null && !name.isEmpty()) stmt.setString(1, name+"%");
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            users.add(new User(rs.getInt("id"), rs.getString("name")));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return users;
}

package servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.google.gson.Gson;

import model.User;
import service.UserService;


@WebServlet("/searchUser")
public class SearchUserServlet extends HttpServlet {
    private UserService userService = new UserService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String queryName = request.getParameter("name");
        List<User> users = userService.getUsersByNamePrefix(queryName);
        String jsonResponse = new Gson().toJson(users);
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        PrintWriter out = response.getWriter();
        out.print(jsonResponse);
        out.flush();
    }
}

CREATE TABLE notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    notification_type_id INT NOT NULL,
    message VARCHAR(255) NOT NULL,
    is_read TINYINT(1) DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (notification_type_id) REFERENCES notification_types(id)
);

CREATE TABLE notification_types (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    redirect_url VARCHAR(255) NOT NULL,
    created_at DEFAULT CURRENT_TIMESTAMP,
    updated_at DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

<div>
  <button type="button" class="btn position-relative" data-bs-toggle="modal" data-bs-target="#notificationModal">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-bell" viewBox="0 0 16 16">
      <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z"/>
    </svg>
    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">3</span>
  </button>
</div>

<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="notificationModalLabel">通知一覧</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <ul class="list-group">
          <li class="list-group-item">通知メッセージ</li>
          <li class="list-group-item">通知メッセージ</li>
          <li class="list-group-item">通知メッセージ</li>
        </ul>
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
