SELECT DISTINCT r.id, r.name, r.sum_star / r.num_customer AS avg_star
FROM restaurants r
JOIN visited_restaurants vr1 ON r.id = vr1.restaurant_id
JOIN visited_restaurants vr2 ON vr1.user_id = vr2.user_id
WHERE vr2.restaurant_id IN (
    SELECT vr3.restaurant_id
    FROM visited_restaurants vr3
    WHERE vr3.user_id = 1
)
AND vr2.user_id <> 1
AND r.id NOT IN (
    SELECT vr4.restaurant_id
    FROM visited_restaurants vr4
    WHERE vr4.user_id = 1
)
ORDER BY avg_star DESC
LIMIT 5;


import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import service.RestaurantService;

@WebServlet("/displayImage")
public class DisplayImageServlet {
	private static final long serialVersionUID = 1L;
	private RestaurantService restaurantService = new restaurantService();

    public DisplayImageServlet() {
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		int restaurantId = Integer.parseInt(request.getParameter("id"));
        response.setContentType("image/png");

        byte[] byteArray = restaurantService.getImageBytesByRestaurantId(restaurantId);
    	InputStream is = new ByteArrayInputStream(byteArray);
    	BufferedInputStream bufferedIs = new BufferedInputStream(is);
        BufferedImage img = ImageIO.read(bufferedIs);

        OutputStream outputStream = response.getOutputStream();
        ImageIO.write(img, "png", outputStream);
        outputStream.flush();
	}
}
